generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

// PRISMA MODELS

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
  @@map("accounts")
}
 
model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@map("sessions")
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@unique([identifier, token])
  @@map("verificationtokens")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]

  // custom references
  packs GamePack[]
  rooms GameRoom[]
 
  @@map("users")
}

// DOMAIN MODELS

enum GameType {
  SLOTS
  QUIZ
  TERRITORY
}

model GamePack {
  id String @id @default(cuid())
  name String
  description String
  gameType GameType
  image String?
  isPublic Boolean @default(false) @map("is_public")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  userId String @map("user_id")
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  rooms GameRoom[]

  slotsPack SlotsPack?

  @@index([userId])
  @@index([gameType])
  @@map("game_packs")
}

model GameRoom {
  id String @id @default(cuid())
  server String
  code String @unique
  isPublic Boolean @map("is_public")
  name String
  description String
  image String?

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  ownerId String @map("owner_id")
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  packId String @map("pack_id")
  pack GamePack @relation(fields: [packId], references: [id], onDelete: Cascade)

  @@index([code])
  @@index([isPublic])
	@@map("game_rooms")
}

// SLOTS GAME

model SlotsPack {
  packId String @id @map("pack_id")
  pack GamePack @relation(fields: [packId], references: [id], onDelete: Cascade)

  stages SlotsStage[]

  @@map("slots_packs")
}

model SlotsStage {
  id String @id @default(cuid())
  number Int
  name String
  description String
  image String?

  packId String @map("pack_id")
  pack SlotsPack @relation(fields: [packId], references: [packId], onDelete: Cascade)

  topics SlotsTopic[]

  @@index([packId])
  @@map("slots_stages")
}

model SlotsTopic {
  id String @id @default(cuid())
  number Int
  name String

  stageId String @map("stage_id")
  stage SlotsStage @relation(fields: [stageId], references: [id], onDelete: Cascade)

  questions SlotsQuestion[]

  @@index([stageId])
  @@map("slots_topics")
}

enum SlotsQuestionType {
  TEXT
  IMAGE
  AUDIO
  VIDEO
}

model SlotsQuestion {
  id String @id @default(cuid())
  type SlotsQuestionType
  points Int
  title String
  content String

  topicId String @map("topic_id")
  topic SlotsTopic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@index([topicId])
  @@map("slots_questions")
}